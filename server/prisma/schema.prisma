// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Search {
  id        String   @id @default(cuid())
  query     String   @unique
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  location  String?
  latitude  Float?
  longitude Float?
  language  String   @default("en") @db.VarChar(5)
  role      String   @default("user") @db.VarChar(16) // 'user' or 'admin'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  settings   Json?
  
  // Audit fields
  createdById String?
  updatedById String?

  // Relationships
  roasters     Roaster[]
  reviews      Review[]
  favorites    Favorite[]
  notifications Notification[]
  comments     Comment[]
  uploadedImages RoasterImage[]
  personRoles RoasterPerson[] @relation("UserPersonRole")
  createdPeople RoasterPerson[] @relation("PersonCreatedBy")
  updatedPeople RoasterPerson[] @relation("PersonUpdatedBy")
  
  // Audit relationships
  createdBy User? @relation("UserCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  
  // Reverse audit relationships
  createdUsers    User[]    @relation("UserCreatedBy")
  updatedUsers    User[]    @relation("UserUpdatedBy")
  createdRoasters Roaster[] @relation("RoasterCreatedBy")
  updatedRoasters Roaster[] @relation("RoasterUpdatedBy")
  createdReviews  Review[]  @relation("ReviewCreatedBy")
  updatedReviews  Review[]  @relation("ReviewUpdatedBy")
  createdBeans    Bean[]    @relation("BeanCreatedBy")
  updatedBeans    Bean[]    @relation("BeanUpdatedBy")
  auditLogs       AuditLog[]

  @@map("users")
}

model Roaster {
  id          String   @id @default(cuid())
  name        String
  description String?
  email       String?
  phone       String?
  website     String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String   @default("US")
  latitude    Float?
  longitude   Float?
  images      String[]
  hours       Json?    // Store opening hours as JSON
  
  // Legacy owner contact fields (for backward compatibility during migration)
  ownerName   String?  // Owner's name (deprecated - use people instead)
  ownerEmail  String?  // Owner's email (deprecated - use people instead)
  ownerBio    String?  // Owner's biography/description (deprecated - use people instead)
  ownerMobile String?  // Owner's mobile phone number (deprecated - use people instead)
  onlineOnly  Boolean  @default(false) // True if roaster operates online only (no physical location)
  specialties String[] // Array of specialties like "Espresso", "Single Origin", etc.
  verified    Boolean  @default(false)
  featured    Boolean  @default(false)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Audit tracking
  createdById String?
  updatedById String?

  // Relationships
  owner    User?    @relation(fields: [ownerId], references: [id])
  ownerId  String?
  people RoasterPerson[]
  reviews  Review[]
  favorites Favorite[]
  beans    Bean[]
  roasterImages RoasterImage[]
  
  // Audit relationships
  createdBy User? @relation("RoasterCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("RoasterUpdatedBy", fields: [updatedById], references: [id])

  @@unique([name])
  @@map("roasters")
}

model RoasterPerson {
  id        String   @id @default(cuid())
  roasterId String
  roaster   Roaster  @relation(fields: [roasterId], references: [id], onDelete: Cascade)
  
  // Contact information
  name      String
  email     String?  // Optional - may not be a registered user
  mobile    String?
  bio       String?
  
  // Link to registered user (optional)
  userId    String?
  user      User?    @relation("UserPersonRole", fields: [userId], references: [id], onDelete: SetNull)
  
  // Roles (multiple roles per person)
  roles     String[] // Array of role names: "owner", "admin", "billing"
  
  // Status
  isActive  Boolean  @default(true)
  isPrimary Boolean  @default(false) // Primary contact for the roaster
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String?
  updatedById String?
  
  // Audit relationships  
  createdBy User? @relation("PersonCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("PersonUpdatedBy", fields: [updatedById], references: [id])
  
  @@unique([roasterId, email]) // Prevent duplicate emails per roaster
  @@map("roaster_people")
}

model RoasterImage {
  id          String   @id @default(cuid())
  url         String   // Cloudinary URL
  publicId    String   // Cloudinary public ID for deletion
  filename    String?  // Original filename
  description String?  // Alt text/description
  isPrimary   Boolean  @default(false) // Mark one image as primary for display
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  roaster     Roaster  @relation(fields: [roasterId], references: [id], onDelete: Cascade)
  roasterId   String
  uploadedBy  User     @relation(fields: [uploadedById], references: [id])
  uploadedById String

  @@map("roaster_images")
}

model Bean {
  id          String   @id @default(cuid())
  name        String
  description String?
  origin      String?  // Country/region of origin
  process     String?  // Washed, Natural, Honey, etc.
  roastLevel  String?  // Light, Medium, Dark
  price       Float?
  weight      String?  // 12oz, 1lb, etc.
  tastingNotes String[] // Chocolate, Fruity, Nutty, etc.
  availability Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Audit tracking
  createdById String?
  updatedById String?

  // Relationships
  roaster   Roaster @relation(fields: [roasterId], references: [id])
  roasterId String
  
  // Audit relationships
  createdBy User? @relation("BeanCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("BeanUpdatedBy", fields: [updatedById], references: [id])

  @@map("beans")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  title     String?
  content   String?
  images    String[]
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Audit tracking
  createdById String?
  updatedById String?

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  roaster   Roaster? @relation(fields: [roasterId], references: [id])
  roasterId String?
  comments  Comment[]
  
  // Audit relationships
  createdBy User? @relation("ReviewCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("ReviewUpdatedBy", fields: [updatedById], references: [id])

  @@map("reviews")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  @@map("comments")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  roaster   Roaster @relation(fields: [roasterId], references: [id])
  roasterId String

  @@unique([userId, roasterId])
  @@map("favorites")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // new_roaster, new_review, etc.
  title     String
  message   String
  read      Boolean  @default(false)
  data      Json?    // Additional data for the notification
  createdAt DateTime @default(now())

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("notifications")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String   // CREATE, UPDATE, DELETE
  entityType  String   // roaster, review, bean, user, etc.
  entityId    String   // ID of the affected entity
  entityName  String?  // Display name for the entity (e.g., roaster name)
  changes     Json?    // Field-level changes: { "field": { "old": "value", "new": "value" } }
  ipAddress   String?  // IP address of the user
  userAgent   String?  // Browser/client information
  city        String?  // Geolocation city
  country     String?  // Geolocation country
  createdAt   DateTime @default(now())

  // Relationships
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}
